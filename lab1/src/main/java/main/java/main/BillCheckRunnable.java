package main.java.main;

import com.google.common.util.concurrent.AtomicDouble;
import org.javatuples.Pair;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.locks.ReadWriteLock;

/**
 * This runnable performs the stock checks and prints the result
 */
public class BillCheckRunnable implements Runnable {

    /**
     * A copy of the initial stock
     */
    private final List<Product> initial_products;
    /**
     * The products the current inventory
     */
    private List<Product> products;
    /**
     * The current set of bills
     */
    private BlockingQueue<List<Pair<String, Integer>>> bills;
    /**
     * All the bills form start to finish
     */
    private static BlockingQueue<List<Pair<String, Integer>>> allBills = new ArrayBlockingQueue<>(Main.SALES);
    /**
     * The centralized money
     */
    private AtomicDouble money;
    /**
     * The lock for the bills queue
     */
    private ReadWriteLock billsLock;

    /**
     * The checks are performed based on the following parameters
     *
     * @param products  the list of products/ the inventory itself
     * @param bills     the queue where the bills are stored momentarily
     * @param money     the central AtomicDouble of the money generated by the sales
     * @param billsLock the lock for the bills so that sales halt while checks are performed
     */
    BillCheckRunnable(List<Product> products, BlockingQueue<List<Pair<String, Integer>>> bills, AtomicDouble money, ReadWriteLock billsLock) {
        this.products = products;
        this.bills = bills;
        this.money = money;
        this.billsLock = billsLock;
        this.initial_products = new ArrayList<>();
        products.forEach(p -> initial_products.add(new Product(p)));
    }

    /**
     * Performs a check and prints the result
     */
    @Override
    public void run() {

        HashMap<String, Integer> record = new HashMap<>();
        products.forEach(product -> record.put(product.name, 0));
        AtomicDouble sum = new AtomicDouble(0);

        if (Main.BILL_LOCKING)
            billsLock.writeLock().lock();

        Double tempMoney = money.get();
        bills.drainTo(allBills);


        allBills.forEach(bill -> bill.forEach(pair -> {
            String product = pair.getValue0();
            Integer number = pair.getValue1();
            number += (Integer) record.get(product);
            record.put(product, number);
        }));


        System.out.println("Nr. sales: " + allBills.size());
        record.forEach((product, number) -> {
            sum.addAndGet(initial_products.stream().filter(p -> p.name.equals(product)).findFirst().get().price * (Integer) number);
            System.out.println("Sold in total " + number + " " + product + "s!");
        });
        System.out.printf("Expected: %.2f," +
                "\nGot:      %.2f\n", sum.get(), tempMoney);

        if (Main.BILL_LOCKING)
            billsLock.writeLock().unlock();
    }
}
